{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript,typescriptreact",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Function": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "f",
		"body": ["const $1 = ($2:$3):$4 => {", "\t$5", "\n\treturn ();", "}"]
	},
	"Export Function": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "ef",
		"body": [
			"export const $1 = ($2:{$3:void}) => {",
			"\t$4",
			"\n\treturn ();",
			"}"
		]
	},
	"Return Function": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "rf",
		"body": ["const $1 = ($2:$3):$4 => (", "\n\t", ")"]
	},
	"Functional Component": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "fc",
		"body": [
			"const $1 = (props:$2):$3 => {",
			"\t$3",
			"\n\treturn ($4);",
			"}"
		]
	},
	"Export Functional Component": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "efc",
		"body": [
			"export const $1 = (props:$2):$3 => {",
			"\n\treturn ($4);",
			"}"
		]
	},
	"Export Default Functional Component": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "edfc",
		"body": [
			"export default function $1(props:$2) {",
			"\t$3",
			"\n\treturn ();",
			"}"
		]
	},
	"(TS) Type": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "type",
		"body": ["type $1 = {", "\t$2", "}"]
	},
	"Deconstruct Props": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "dp",
		"body": ["const {$1} = props;", "$2"]
	},
	"LOG output to console": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "log",
		"body": ["console.log('$1')", "$2"]
	},
	"Log Variable to Console": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "pv",
		"body": ["console.log('$1: ', $1)", "$2"]
	},
	"Break Point": {
		"scope": "javascript,typescript,typescriptreact",
		"prefix": "bp",
		"body": ["debugger;", "$0"]
	}
}
